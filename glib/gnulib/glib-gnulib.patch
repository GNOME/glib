diff --git a/glib/gnulib/asnprintf.c b/glib/gnulib/asnprintf.c
index f6bf813..75bf17c 100644
--- a/glib/gnulib/asnprintf.c
+++ b/glib/gnulib/asnprintf.c
@@ -16,6 +16,8 @@
 
 #include <config.h>
 
+#include "g-gnulib.h"
+
 /* Specification.  */
 #include "vasnprintf.h"
 
diff --git a/glib/gnulib/isnand-nolibm.h b/glib/gnulib/isnand-nolibm.h
index 82730f1..fc2f3c7 100644
--- a/glib/gnulib/isnand-nolibm.h
+++ b/glib/gnulib/isnand-nolibm.h
@@ -16,7 +16,7 @@
 
 #if HAVE_ISNAND_IN_LIBC
 /* Get declaration of isnan macro.  */
-# include <math.h>
+# include <gnulib_math.h>
 # if __GNUC__ >= 4
    /* GCC 4.0 and newer provides three built-ins for isnan.  */
 #  undef isnand
diff --git a/glib/gnulib/isnand.c b/glib/gnulib/isnand.c
index 8b680fb..99cd4a4 100644
--- a/glib/gnulib/isnand.c
+++ b/glib/gnulib/isnand.c
@@ -15,5 +15,7 @@
    along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
 
 /* Written by Bruno Haible <bruno@clisp.org>, 2008.  */
-
+#include <config.h>
+#include "gnulib_math.h"
+#include "isnand-nolibm.h"
 #include "isnan.c"
diff --git a/glib/gnulib/isnanl-nolibm.h b/glib/gnulib/isnanl-nolibm.h
index e6be02c..2b384e7 100644
--- a/glib/gnulib/isnanl-nolibm.h
+++ b/glib/gnulib/isnanl-nolibm.h
@@ -16,7 +16,7 @@
 
 #if HAVE_ISNANL_IN_LIBC
 /* Get declaration of isnan macro or (older) isnanl function.  */
-# include <math.h>
+# include <gnulib_math.h>
 # if __GNUC__ >= 4
    /* GCC 4.0 and newer provides three built-ins for isnan.  */
 #  undef isnanl
diff --git a/glib/gnulib/isnanl.c b/glib/gnulib/isnanl.c
index 96848eb..6cd0db8 100644
--- a/glib/gnulib/isnanl.c
+++ b/glib/gnulib/isnanl.c
@@ -17,4 +17,7 @@
 /* Written by Bruno Haible <bruno@clisp.org>, 2007.  */
 
 #define USE_LONG_DOUBLE
+#include <config.h>
+#include "gnulib_math.h"
+#include "isnanl-nolibm.h"
 #include "isnan.c"
diff --git a/glib/gnulib/printf-args.c b/glib/gnulib/printf-args.c
index 51c3b90..1c1f660 100644
--- a/glib/gnulib/printf-args.c
+++ b/glib/gnulib/printf-args.c
@@ -24,6 +24,8 @@
 # include <config.h>
 #endif
 
+#include "g-gnulib.h"
+
 /* Specification.  */
 #ifndef PRINTF_FETCHARGS
 # include "printf-args.h"
@@ -65,7 +67,7 @@ PRINTF_FETCHARGS (va_list args, arguments *a)
       case TYPE_ULONGINT:
         ap->a.a_ulongint = va_arg (args, unsigned long int);
         break;
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
       case TYPE_LONGLONGINT:
         ap->a.a_longlongint = va_arg (args, long long int);
         break;
@@ -135,7 +137,7 @@ PRINTF_FETCHARGS (va_list args, arguments *a)
       case TYPE_COUNT_LONGINT_POINTER:
         ap->a.a_count_longint_pointer = va_arg (args, long int *);
         break;
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
       case TYPE_COUNT_LONGLONGINT_POINTER:
         ap->a.a_count_longlongint_pointer = va_arg (args, long long int *);
         break;
diff --git a/glib/gnulib/printf-args.h b/glib/gnulib/printf-args.h
index 50daa42..46a7aa8 100644
--- a/glib/gnulib/printf-args.h
+++ b/glib/gnulib/printf-args.h
@@ -57,7 +57,7 @@ typedef enum
   TYPE_UINT,
   TYPE_LONGINT,
   TYPE_ULONGINT,
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
   TYPE_LONGLONGINT,
   TYPE_ULONGLONGINT,
 #endif
@@ -76,7 +76,7 @@ typedef enum
   TYPE_COUNT_SHORT_POINTER,
   TYPE_COUNT_INT_POINTER,
   TYPE_COUNT_LONGINT_POINTER
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
 , TYPE_COUNT_LONGLONGINT_POINTER
 #endif
 #if ENABLE_UNISTDIO
@@ -101,7 +101,7 @@ typedef struct
     unsigned int                a_uint;
     long int                    a_longint;
     unsigned long int           a_ulongint;
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
     long long int               a_longlongint;
     unsigned long long int      a_ulonglongint;
 #endif
@@ -121,7 +121,7 @@ typedef struct
     short *                     a_count_short_pointer;
     int *                       a_count_int_pointer;
     long int *                  a_count_longint_pointer;
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
     long long int *             a_count_longlongint_pointer;
 #endif
 #if ENABLE_UNISTDIO
diff --git a/glib/gnulib/printf-frexp.c b/glib/gnulib/printf-frexp.c
index 7ad1a2f..dd46a43 100644
--- a/glib/gnulib/printf-frexp.c
+++ b/glib/gnulib/printf-frexp.c
@@ -26,7 +26,7 @@
 #endif
 
 #include <float.h>
-#include <math.h>
+#include <gnulib_math.h>
 #ifdef USE_LONG_DOUBLE
 # include "fpucw.h"
 #endif
diff --git a/glib/gnulib/printf-parse.c b/glib/gnulib/printf-parse.c
index 1492a95..9efe54b 100644
--- a/glib/gnulib/printf-parse.c
+++ b/glib/gnulib/printf-parse.c
@@ -31,6 +31,8 @@
 # include <config.h>
 #endif
 
+#include "g-gnulib.h"
+
 /* Specification.  */
 #ifndef PRINTF_PARSE
 # include "printf-parse.h"
@@ -447,7 +449,7 @@ PRINTF_PARSE (const CHAR_T *format, DIRECTIVES *d, arguments *a)
               switch (c)
                 {
                 case 'd': case 'i':
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
                   /* If 'long long' exists and is larger than 'long':  */
                   if (flags >= 16 || (flags & 4))
                     type = TYPE_LONGLONGINT;
@@ -465,7 +467,7 @@ PRINTF_PARSE (const CHAR_T *format, DIRECTIVES *d, arguments *a)
                     type = TYPE_INT;
                   break;
                 case 'o': case 'u': case 'x': case 'X':
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
                   /* If 'long long' exists and is larger than 'long':  */
                   if (flags >= 16 || (flags & 4))
                     type = TYPE_ULONGLONGINT;
@@ -525,7 +527,7 @@ PRINTF_PARSE (const CHAR_T *format, DIRECTIVES *d, arguments *a)
                   type = TYPE_POINTER;
                   break;
                 case 'n':
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
                   /* If 'long long' exists and is larger than 'long':  */
                   if (flags >= 16 || (flags & 4))
                     type = TYPE_COUNT_LONGLONGINT_POINTER;
diff --git a/glib/gnulib/vasnprintf.c b/glib/gnulib/vasnprintf.c
index 3b2a538..2afbfe9 100644
--- a/glib/gnulib/vasnprintf.c
+++ b/glib/gnulib/vasnprintf.c
@@ -43,19 +43,21 @@
      DCHAR_IS_UINT16_T  Set to 1 if DCHAR_T is uint16_t.
      DCHAR_IS_UINT32_T  Set to 1 if DCHAR_T is uint32_t.  */
 
+#ifndef _WIN32
 /* Tell glibc's <stdio.h> to provide a prototype for snprintf().
    This must come before <config.h> because <config.h> may include
    <features.h>, and once <features.h> has been included, it's too late.  */
 #ifndef _GNU_SOURCE
 # define _GNU_SOURCE    1
 #endif
+#endif
 
 #ifndef VASNPRINTF
 # include <config.h>
 #endif
-#ifndef IN_LIBINTL
-# include <alloca.h>
-#endif
+#include "glib/galloca.h"
+
+#include "g-gnulib.h"
 
 /* Specification.  */
 #ifndef VASNPRINTF
@@ -90,29 +92,29 @@
 #include "verify.h"
 
 #if (NEED_PRINTF_DOUBLE || NEED_PRINTF_LONG_DOUBLE) && !defined IN_LIBINTL
-# include <math.h>
+# include <gnulib_math.h>
 # include "float+.h"
 #endif
 
 #if (NEED_PRINTF_DOUBLE || NEED_PRINTF_INFINITE_DOUBLE) && !defined IN_LIBINTL
-# include <math.h>
+# include <gnulib_math.h>
 # include "isnand-nolibm.h"
 #endif
 
 #if (NEED_PRINTF_LONG_DOUBLE || NEED_PRINTF_INFINITE_LONG_DOUBLE) && !defined IN_LIBINTL
-# include <math.h>
+# include <gnulib_math.h>
 # include "isnanl-nolibm.h"
 # include "fpucw.h"
 #endif
 
 #if (NEED_PRINTF_DIRECTIVE_A || NEED_PRINTF_DOUBLE) && !defined IN_LIBINTL
-# include <math.h>
+# include <gnulib_math.h>
 # include "isnand-nolibm.h"
 # include "printf-frexp.h"
 #endif
 
 #if (NEED_PRINTF_DIRECTIVE_A || NEED_PRINTF_LONG_DOUBLE) && !defined IN_LIBINTL
-# include <math.h>
+# include <gnulib_math.h>
 # include "isnanl-nolibm.h"
 # include "printf-frexpl.h"
 # include "fpucw.h"
@@ -1551,7 +1553,7 @@ MAX_ROOM_NEEDED (const arguments *ap, size_t arg_index, FCHAR_T conversion,
   switch (conversion)
     {
     case 'd': case 'i': case 'u':
-# if HAVE_LONG_LONG_INT
+# if HAVE_LONG_LONG
       if (type == TYPE_LONGLONGINT || type == TYPE_ULONGLONGINT)
         tmp_length =
           (unsigned int) (sizeof (unsigned long long) * CHAR_BIT
@@ -1581,7 +1583,7 @@ MAX_ROOM_NEEDED (const arguments *ap, size_t arg_index, FCHAR_T conversion,
       break;
 
     case 'o':
-# if HAVE_LONG_LONG_INT
+# if HAVE_LONG_LONG
       if (type == TYPE_LONGLONGINT || type == TYPE_ULONGLONGINT)
         tmp_length =
           (unsigned int) (sizeof (unsigned long long) * CHAR_BIT
@@ -1609,7 +1611,7 @@ MAX_ROOM_NEEDED (const arguments *ap, size_t arg_index, FCHAR_T conversion,
       break;
 
     case 'x': case 'X':
-# if HAVE_LONG_LONG_INT
+# if HAVE_LONG_LONG
       if (type == TYPE_LONGLONGINT || type == TYPE_ULONGLONGINT)
         tmp_length =
           (unsigned int) (sizeof (unsigned long long) * CHAR_BIT
@@ -1937,7 +1939,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                   case TYPE_COUNT_LONGINT_POINTER:
                     *a.arg[dp->arg_index].a.a_count_longint_pointer = length;
                     break;
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
                   case TYPE_COUNT_LONGLONGINT_POINTER:
                     *a.arg[dp->arg_index].a.a_count_longlongint_pointer = length;
                     break;
@@ -4243,7 +4245,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                                   static const wchar_t decimal_format[] =
                                     /* Produce the same number of exponent digits
                                        as the native printf implementation.  */
-#    if defined _WIN32 && ! defined __CYGWIN__
+#    if (defined _WIN32 && FALSE) && ! defined __CYGWIN__
                                     { '%', '+', '.', '3', 'd', '\0' };
 #    else
                                     { '%', '+', '.', '2', 'd', '\0' };
@@ -4257,7 +4259,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                                   static const char decimal_format[] =
                                     /* Produce the same number of exponent digits
                                        as the native printf implementation.  */
-#    if defined _WIN32 && ! defined __CYGWIN__
+#    if (defined _WIN32 && FALSE) && ! defined __CYGWIN__
                                     "%+.3d";
 #    else
                                     "%+.2d";
@@ -4436,7 +4438,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                                           static const wchar_t decimal_format[] =
                                             /* Produce the same number of exponent digits
                                                as the native printf implementation.  */
-#    if defined _WIN32 && ! defined __CYGWIN__
+#    if (defined _WIN32 && FALSE) && ! defined __CYGWIN__
                                             { '%', '+', '.', '3', 'd', '\0' };
 #    else
                                             { '%', '+', '.', '2', 'd', '\0' };
@@ -4450,7 +4452,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                                           static const char decimal_format[] =
                                             /* Produce the same number of exponent digits
                                                as the native printf implementation.  */
-#    if defined _WIN32 && ! defined __CYGWIN__
+#    if (defined _WIN32 && FALSE) && ! defined __CYGWIN__
                                             "%+.3d";
 #    else
                                             "%+.2d";
@@ -4508,7 +4510,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                                 *p++ = '+';
                                 /* Produce the same number of exponent digits as
                                    the native printf implementation.  */
-#   if defined _WIN32 && ! defined __CYGWIN__
+#   if (defined _WIN32 || FALSE) && ! defined __CYGWIN__
                                 *p++ = '0';
 #   endif
                                 *p++ = '0';
@@ -4833,10 +4835,10 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
 
                 switch (type)
                   {
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
                   case TYPE_LONGLONGINT:
                   case TYPE_ULONGLONGINT:
-# if defined _WIN32 && ! defined __CYGWIN__
+# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
                     *fbp++ = 'I';
                     *fbp++ = '6';
                     *fbp++ = '4';
@@ -4872,7 +4874,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
 # if ! (((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3))        \
          && !defined __UCLIBC__)                                            \
         || (defined __APPLE__ && defined __MACH__)                          \
-        || (defined _WIN32 && ! defined __CYGWIN__))
+        || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))
                 fbp[1] = '%';
                 fbp[2] = 'n';
                 fbp[3] = '\0';
@@ -5052,7 +5054,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
                           SNPRINTF_BUF (arg);
                         }
                         break;
-#if HAVE_LONG_LONG_INT
+#if HAVE_LONG_LONG
                       case TYPE_LONGLONGINT:
                         {
                           long long int arg = a.arg[dp->arg_index].a.a_longlongint;
diff --git a/glib/gnulib/xsize.h b/glib/gnulib/xsize.h
index 544aeaa..f0436cb 100644
--- a/glib/gnulib/xsize.h
+++ b/glib/gnulib/xsize.h
@@ -18,10 +18,12 @@
 #ifndef _XSIZE_H
 #define _XSIZE_H
 
+#include <glib.h>
+
 /* Get size_t.  */
 #include <stddef.h>
 
-/* Get SIZE_MAX.  */
+/* Get G_MAXSIZE.  */
 #include <limits.h>
 #if HAVE_STDINT_H
 # include <stdint.h>
@@ -42,8 +44,8 @@ _GL_INLINE_HEADER_BEGIN
    returns a piece of memory that is way too small, and the program then
    crashes while attempting to fill the memory.
    To avoid this, the functions and macros in this file check for overflow.
-   The convention is that SIZE_MAX represents overflow.
-   malloc (SIZE_MAX) is not guaranteed to fail -- think of a malloc
+   The convention is that G_MAXSIZE represents overflow.
+   malloc (G_MAXSIZE) is not guaranteed to fail -- think of a malloc
    implementation that uses mmap --, it's recommended to use size_overflow_p()
    or size_in_bounds_p() before invoking malloc().
    The example thus becomes:
@@ -53,7 +55,7 @@ _GL_INLINE_HEADER_BEGIN
 
 /* Convert an arbitrary value >= 0 to type size_t.  */
 #define xcast_size_t(N) \
-  ((N) <= SIZE_MAX ? (size_t) (N) : SIZE_MAX)
+  ((N) <= G_MAXSIZE ? (size_t) (N) : G_MAXSIZE)
 
 /* Sum of two sizes, with overflow check.  */
 XSIZE_INLINE size_t
@@ -63,7 +65,7 @@ __attribute__ ((__pure__))
 xsum (size_t size1, size_t size2)
 {
   size_t sum = size1 + size2;
-  return (sum >= size1 ? sum : SIZE_MAX);
+  return (sum >= size1 ? sum : G_MAXSIZE);
 }
 
 /* Sum of three sizes, with overflow check.  */
@@ -94,23 +96,23 @@ __attribute__ ((__pure__))
 xmax (size_t size1, size_t size2)
 {
   /* No explicit check is needed here, because for any n:
-     max (SIZE_MAX, n) == SIZE_MAX and max (n, SIZE_MAX) == SIZE_MAX.  */
+     max (G_MAXSIZE, n) == G_MAXSIZE and max (n, G_MAXSIZE) == G_MAXSIZE.  */
   return (size1 >= size2 ? size1 : size2);
 }
 
 /* Multiplication of a count with an element size, with overflow check.
    The count must be >= 0 and the element size must be > 0.
    This is a macro, not a function, so that it works correctly even
-   when N is of a wider type and N > SIZE_MAX.  */
+   when N is of a wider type and N > G_MAXSIZE.  */
 #define xtimes(N, ELSIZE) \
-  ((N) <= SIZE_MAX / (ELSIZE) ? (size_t) (N) * (ELSIZE) : SIZE_MAX)
+  ((N) <= G_MAXSIZE / (ELSIZE) ? (size_t) (N) * (ELSIZE) : G_MAXSIZE)
 
 /* Check for overflow.  */
 #define size_overflow_p(SIZE) \
-  ((SIZE) == SIZE_MAX)
+  ((SIZE) == G_MAXSIZE)
 /* Check against overflow.  */
 #define size_in_bounds_p(SIZE) \
-  ((SIZE) != SIZE_MAX)
+  ((SIZE) != G_MAXSIZE)
 
 _GL_INLINE_HEADER_END
 
